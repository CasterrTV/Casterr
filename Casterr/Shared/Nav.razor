<nav>
  <ul>
    <li>
      <NavLink href="recordings">
        <Icon i="play" />
        <span>Recordings</span>
      </NavLink>
    </li>
    <li>
      <NavLink href="uploads">
        <Icon i="upload" />
        <span>Uploads</span>
      </NavLink>
    </li>
    <li>
      <NavLink href="settings">
        <Icon i="settings" />
        <span>Settings</span>
      </NavLink>
    </li>
    <li>
      <NavLink href="profile">
        <Icon i="play" />
        <span>Profile</span>
      </NavLink>
    </li>
    <li id="status">
      <span id="timeElapsed" class="@RecorderLib.RecordingStatus.ElapsedClass">@($"{elaspedTime:hh\\:mm\\:ss}")</span>
      <div class="circle @RecorderLib.RecordingStatus.CircleClass"></div>
    </li>
  </ul>
</nav>

@code {
  private TimeSpan elaspedTime;

  protected override void OnAfterRender(bool firstRender)
  {
    RecorderLib.RecordingStatus.ShouldChangeState += UpdateState;
  }

  private async void UpdateState()
  {
    await InvokeAsync(() =>
    {
      StateHasChanged();
    });

    await UpdateTimer();
  }

  private async Task UpdateTimer()
  {
    while (RecorderLib.RecordingStatus.RecordingWatch.IsRunning)
    {
      await Task.Delay(1000);

      elaspedTime = RecorderLib.RecordingStatus.RecordingWatch.Elapsed;

      await InvokeAsync(() =>
      {
        StateHasChanged();
      });
    }
  }
}
