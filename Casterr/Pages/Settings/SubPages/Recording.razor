@page "/settings/recording"

@using Casterr.Shared.UI
@using Casterr.SettingsLib
@using Casterr.RecorderLib.FFmpeg
@using ElectronNET.API
@using ElectronNET.API.Entities

@inject SettingsManager sm
@inject RecordingSettings rs
@inject DeviceManager dm

<div class="settings">
    <span class="pageTitle">Recording Settings</span>

    <div class="setting">
        <span class="title">Video Device:</span>
        <DropDown Name="videoDevice" Items="@videoDeviceItems" Placeholder="@rs.VideoDevice" OnSelectedChanged=@UpdateSettings />
    </div>

    <div class="setting">
        <span class="title">FPS:</span>
        <TextBox Name="fps" Placeholder="@rs.FPS" Type="number" OnLoseFocus=@UpdateSettings />
    </div>

    <div class="setting">
        <span class="title">Resolution:</span>
        <DropDown Name="resolution" Items="@resolutionItems" Placeholder="@rs.Resolution" OnSelectedChanged=@UpdateSettings />
    </div>

    <div class="setting">
        <span class="title">Format:</span>
        <DropDown Name="format" Items="@formatItems" Placeholder="@rs.Format" OnSelectedChanged=@UpdateSettings />
    </div>

    <div class="setting">
        <span class="title">Zero Latency:</span>
        <TickBox Name="zeroLatency" Checked="@rs.ZeroLatency" OnClick=@UpdateSettings />
    </div>

    <div class="setting">
        <span class="title">Ultra Fast:</span>
        <TickBox Name="ultraFast" Checked="@rs.UltraFast" OnClick=@UpdateSettings />
    </div>

    <div class="setting">
        <span class="title">Audio Device:</span>
        <DropDown Name="audioDevice" Items="@audioDeviceItems" Placeholder=@rs.AudioDevice OnSelectedChanged=@UpdateSettings />
    </div>

    <div class="setting">
        <span class="title">Seperate Audio Tracks:</span>
        <TickBox Name="seperateAudioTracks" Checked="@rs.SeperateAudioTracks" OnClick=@UpdateSettings />
    </div>

    <div class="setting">
        <span class="title">Record Desktop Audio:</span>
        <TickBox Name="recordDesktopAudio" Checked="@rs.RecordDesktopAudio" OnClick=@UpdateSettings />
    </div>

    <div class="setting">
        <span class="title">Video Save Folder:</span>
        <TextBox Name="videoSaveFolder" Placeholder="@rs.VideoSaveFolder" OnLoseFocus=@UpdateSettings>
            <button @onclick=@(e => SelectVideoSaveFolder())>Change</button>
        </TextBox>
    </div>
</div>

@code {
    private List<string> resolutionItems = new List<string> { "In-Game", "2160p", "1440p", "1080p", "720p", "480p", "360p" };
    private List<string> formatItems = new List<string> { "mp4", "mkv" };
    private List<string> audioDeviceItems = new List<string> { "Default", "None" };
    private List<string> videoDeviceItems = new List<string> { "Default" };

    protected override void OnInitialized()
    {
        sm.GetSettings(rs);

        // Add device from settings to appropriate list
        audioDeviceItems.Add(rs.AudioDevice);
        videoDeviceItems.Add(rs.VideoDevice);

        var allDevices = dm.GetDevices();

        foreach (var audDev in allDevices.Result.Item1)
        {
            audioDeviceItems.Add(audDev);
        }

        foreach (var vidDev in allDevices.Result.Item2)
        {
            videoDeviceItems.Add(vidDev);
        }
    }

    private async Task SelectVideoSaveFolder()
    {
        var options = new OpenDialogOptions
        {
            Title = "Select a folder to save videos to",
            DefaultPath = Environment.GetFolderPath(Environment.SpecialFolder.MyVideos),
            Properties = new OpenDialogProperty[]
            {
                OpenDialogProperty.openDirectory
            }
        };

        var path = await Electron.Dialog.ShowOpenDialogAsync(Electron.WindowManager.BrowserWindows.First(), options);

        UpdateSettings("videoSaveFolder", path.First());
    }

    public void UpdateSettings(string name, string newValue)
    {
        switch (name)
        {
            case "videoDevice":
                rs.VideoDevice = newValue;
                break;
            case "fps":
                rs.FPS = newValue;
                break;
            case "resolution":
                rs.Resolution = newValue;
                break;
            case "format":
                rs.Format = newValue;
                break;
            case "zeroLatency":
                rs.ZeroLatency = newValue;
                break;
            case "ultraFast":
                rs.UltraFast = newValue;
                break;
            case "audioDevice":
                rs.AudioDevice = newValue;
                break;
            case "seperateAudioTracks":
                rs.SeperateAudioTracks = newValue;
                break;
            case "recordDesktopAudio":
                rs.RecordDesktopAudio = newValue;
                break;
            case "videoSaveFolder":
                rs.VideoSaveFolder = newValue;
                break;
        }

        sm.UpdateSettingsFile(rs);
    }
}