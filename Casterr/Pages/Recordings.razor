@page "/recordings"

<div class="recordingsContainer">
  @if (allRecordings.Count() > 0)
  {
    <div class="thumbContainer">
      @foreach (var v in loadedRecordings)
      {
        <div class="thumb">
          <div class="inner">
            @if (v.ThumbPath != null)
            {
              <img src="data:image/jpeg;base64,@Convert.ToBase64String(System.IO.File.ReadAllBytes(v.ThumbPath))" alt="" />
            }
            else
            {
              <span class="noThumb">No Thumbnail Found</span>
            }

            <div class="info">
              <span class="fps">
                @v.FPS <p>FPS</p>
              </span>

              <span class="edit">
                <Icon i="edit" />
              </span>

              <div class="bar">
                <span class="title">
                  <p>@(System.IO.Path.GetFileNameWithoutExtension(v.VideoPath))</p>
                </span>

                <div class="videoInfo">
                  <span>@v.Duration</span>
                  <span>@v.FileSize.ToReadableFileSize()</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      }
    </div>
  }
  else
  {
    <span class="noRecordings">You Have No Recordings!</span>
  }
</div>

<button @onclick=@(e => LoadMoreRecordings())>Test Load Next</button>

@code {
  private List<RecorderLib.Recording> allRecordings = RecorderLib.Recordings.Get();
  private List<RecorderLib.Recording> loadedRecordings = new List<RecorderLib.Recording>();
  private int recordingsOn = 0;

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
      // Load first set of recordings
      LoadMoreRecordings();
  }

  private void LoadMoreRecordings()
  {
    var itemsToTake = 9;
    var rec = allRecordings.Skip(recordingsOn).Take(itemsToTake).ToList();

    foreach (var v in rec)
    {
      loadedRecordings.Add(new RecorderLib.Recording(){
        VideoPath = v.VideoPath,
        ThumbPath = v.ThumbPath,
        FileSize = 6456456,
        FPS = "60",
        Duration = "dur"
      });
    }

    recordingsOn += itemsToTake;

    InvokeAsync(() => {
      StateHasChanged();
    });
  }
}
